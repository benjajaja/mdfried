name: Test and Build

on:
  push:
    branches: [master]
  pull_request:
  workflow_dispatch:
  workflow_call:

jobs:
  nix-flake-test:
    name: Flake check ‚ùÑÔ∏è
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Install Nix
        uses: cachix/install-nix-action@v24

      - name: Cachix
        uses: cachix/cachix-action@v12
        with:
          name: mdfried-ci
          authToken: "${{ secrets.CACHIX_AUTH_TOKEN }}"

      - name: Flake check
        run: |
          nix flake show
          nix flake check --print-build-logs

  nix-build:
    name: Nix build ‚ùÑÔ∏è
    runs-on: ubuntu-latest
    outputs:
      artifact_path: ${{ steps.upload-artifact.outputs.artifact_path }}
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Install Nix
        uses: cachix/install-nix-action@v24

      - name: Cachix
        uses: cachix/cachix-action@v12
        with:
          name: mdfried-ci
          authToken: "${{ secrets.CACHIX_AUTH_TOKEN }}"

      - name: Build package
        run: |
          nix build . --print-build-logs

      - name: Patchelf
        run: |
          cp ./result/bin/mdfried .
          chmod u+w ./mdfried
          patchelf --set-interpreter /lib64/ld-linux-x86-64.so.2 mdfried

      - name: Test binary portability for Ubuntu 24.04
        run: |
          output=$(docker run --rm -v $(pwd):/work ubuntu:24.04 /work/mdfried --version)
          echo "Output: $output"
          if [[ "$output" =~ ^mdfried\ [0-9]+\.[0-9]+\.[0-9]+.*$ ]]; then
            echo "‚úÖ Binary works on Ubuntu 24.04 - Version: $output"
          else
            echo "‚ùå Binary test failed! Expected format: 'mdfried x.y.z'"
            exit 1
          fi

      - name: Suffix binary artifact
        run: mv ./mdfried ./mdfried_nix_glibc_2_38

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: mdfried-nix
          path: ./mdfried_nix_glibc_2_38

  ubuntu-build:
    name: Ubuntu 20.04 build ü´Ç
    runs-on: ubuntu-latest
    container:
      image: ubuntu:20.04 # Ubuntu 20.04 uses glibc 2.31 (or 2.29?)
    outputs:
      artifact_path: ${{ steps.upload-artifact.outputs.artifact_path }}
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Install dependencies
        run: |
          apt-get update
          DEBIAN_FRONTEND=noninteractive apt-get install -y \
            build-essential \
            curl \
            git \
            clang \
            lld \
            ca-certificates

      - name: Set up Rust
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: nightly-2025-01-24
          override: true
      
      - name: Cache Rust dependencies
        uses: actions/cache@v3
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-cargo-

      - name: Build release with specific features
        uses: actions-rs/cargo@v1
        with:
          command: build
          args: --release --locked

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: mdfried-linux
          path: ./target/release/mdfried

  nix-build-windows:
    name: Nix build (windows) ‚ùÑÔ∏è
    runs-on: ubuntu-latest
    outputs:
      artifact_path: ${{ steps.upload-artifact.outputs.artifact_path }}
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Install Nix
        uses: cachix/install-nix-action@v24

      - name: Cachix
        uses: cachix/cachix-action@v12
        with:
          name: mdfried-ci
          authToken: "${{ secrets.CACHIX_AUTH_TOKEN }}"

      - name: Build package
        run: |
          nix build .#windows --print-build-logs

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: mdfried-windows
          path: ./result/bin/mdfried.exe
